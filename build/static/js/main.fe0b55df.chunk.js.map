{"version":3,"sources":["logo.svg","serviceWorker.js","components/counter.jsx","components/multiCount.jsx","components/NavBar.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Counter","state","value","props","counter","styles","fontSize","fontWeight","functionTest","setState","onDel","classes","this","Fragment","style","className","classExtract","onClick","onDelete","id","Component","MultiCount","counters","handleDelete","counterId","console","log","filter","c","handleAddItem","temp","prevState","map","key","NavBar","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,gLCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCC+BSC,E,4MA7CXC,MAAQ,CACJC,MAAQ,EAAKC,MAAMC,QAAQF,O,EAS/BG,OAAS,CACLC,SAAW,GACXC,WAAY,Q,EAShBC,aAAe,WACX,EAAKC,UAAS,kBAAc,CACxBP,MADU,EAAEA,MACI,O,EAIxBQ,MAAQ,WACJ,EAAKD,UAAS,kBAAc,CACxBP,MADU,EAAEA,MACI,O,6DAbpB,IAAIS,EAAU,mBAEd,OADAA,GAAiC,IAArBC,KAAKX,MAAMC,MAAe,UAAY,Y,+BAgB5C,IAAD,OACL,OACI,kBAAC,IAAMW,SAAP,KACI,0BAAMC,MAAOF,KAAKP,OAAQU,UAAaH,KAAKI,gBAAiBJ,KAAKX,MAAMC,OACxE,4BAAQa,UAAY,+BAA+BE,QAAWL,KAAKJ,cAAnE,KACA,4BAAQO,UAAY,4BAA4BE,QAAW,kBAAM,EAAKd,MAAMe,SAAS,EAAKf,MAAMC,QAAQe,OACxG,4BAAQJ,UAAY,+BAA+BE,QAAWL,KAAKF,OAAnE,U,GAzCMU,aCqCPC,E,4MAjCXpB,MAAQ,CACJqB,SAAU,CACN,CAACH,GAAG,EAAGjB,MAAM,GACb,CAACiB,GAAG,EAAGjB,MAAM,K,EAIrBqB,aAAe,SAACC,GACZC,QAAQC,IAAI,sBAAsBF,GAClC,IAAMF,EAAW,EAAKrB,MAAMqB,SAASK,QAAO,SAAAC,GAAC,OAAIA,EAAET,KAAOK,KAC1D,EAAKf,SAAS,CAACa,c,EAGnBO,cAAgB,WACZ,IAAIC,EAAO,CAACX,GAAG,GAAIjB,MAAM,GACzB,EAAKO,UAAS,SAAAsB,GAAS,MAAK,CACxBT,SAAQ,sBAAOS,EAAUT,UAAjB,CAA0BQ,S,uDAIjC,IAAD,OACJ,OACI,kBAAC,IAAMjB,SAAP,KACI,4BAAQE,UAAY,+BAA+BE,QAASL,KAAKiB,eAAjE,YACCjB,KAAKX,MAAMqB,SAASU,KAAI,SAAA5B,GAAO,OAC5B,kBAAC,EAAD,CAAS6B,IAAK7B,EAAQe,GAAID,SAAU,EAAKK,aAAcnB,QAASA,Y,GA3B3DgB,aCWVc,E,uKAXP,OACI,kBAAC,IAAMrB,SAAP,KACA,6BACI,uBAAGM,GAAG,aAAN,gB,GANKC,a,kBCqBrBe,IAASC,OACO,kBAAC,IAAMvB,SAAP,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,OAEFwB,SAASC,eAAe,SJoGpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fe0b55df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\nclass Counter extends Component {\n   \n    state = {\n        value : this.props.counter.value\n    };\n\n    // used to replace arrow function\n    // constructor(){\n    //     super();\n    //     this.functionTest.bind(this);\n    // }\n\n    styles = {\n        fontSize : 18,\n        fontWeight: \"bold\"\n    }\n\n    classExtract() {\n        let classes = \"badge m-2 badge-\";\n        classes += (this.state.value === 0) ? \"warning\" : \"primary\";\n        return classes;\n    }\n    \n    functionTest = () => {\n        this.setState(({value}) => ({\n            value : value + 1\n        }));\n    };\n\n    onDel = () => {\n        this.setState(({value}) => ({\n            value : value - 1\n        }));\n    };\n\n    render() { \n        return (\n            <React.Fragment>\n                <span style={this.styles} className = {this.classExtract()}>{this.state.value}</span> \n                <button className = \"btn btn-secondary btn-sm m-1\" onClick = {this.functionTest}>+</button>\n                <button className = \"btn btn-danger btn-sm m-1\" onClick = {() => this.props.onDelete(this.props.counter.id)}></button>\n                <button className = \"btn btn-secondary btn-sm m-1\" onClick = {this.onDel}>-</button>\n            </React.Fragment>\n        );\n    };\n};\n\nexport default Counter;","import React, { Component } from 'react';\nimport Counter from './counter';\n\n\nclass MultiCount extends Component{\n\n    state = {\n        counters: [\n            {id:1, value:0},\n            {id:2, value:1}\n        ]\n    };\n\n    handleDelete = (counterId) => {\n        console.log(\"Delete Event handel\",counterId);\n        const counters = this.state.counters.filter(c => c.id !== counterId);\n        this.setState({counters});\n    };\n    \n    handleAddItem = () => {\n        let temp = {id:10, value:0}\n        this.setState(prevState => ({\n            counters : [...prevState.counters,temp]\n        }))\n    };\n\n    render(){\n        return (\n            <React.Fragment>\n                <button className = \"btn btn-secondary btn-sm m-1\" onClick={this.handleAddItem} >Add Item</button>\n                {this.state.counters.map(counter => (\n                    <Counter key={counter.id} onDelete={this.handleDelete} counter={counter}/>\n                ))}\n            </React.Fragment>\n        );\n    }\n\n}\n\nexport default MultiCount;","import React, { Component } from 'react';\nclass NavBar extends Component{\n\n    render(){\n        return(\n            <React.Fragment>\n            <div>\n                <p id='neon-logo'>PhiNet</p>\n            </div>\n        </React.Fragment>\n        )\n    }\n\n};\n\nexport default NavBar;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport MultiCount from './components/multiCount';\nimport NavBar from './components/NavBar';\nimport './index.css';\nimport './NavBar.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n// const ChangeBackground = () =>{\n//     const stylesObj = {background: \"black\"};\n//     return(\n//             <div style={stylesObj} className=\"container\">\n//                 <div>\n//                     <MultiCount />\n//                     <br />\n//                     <MultiCount />\n//                 </div>\n//             </div>)\n// };\n\nReactDOM.render(\n                <React.Fragment>\n                    <NavBar />\n                    <MultiCount />\n                    <br />\n                    <MultiCount />\n                </React.Fragment>\n                , document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}