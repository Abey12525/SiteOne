{"version":3,"sources":["logo.svg","Pages/About.jsx","Pages/Home.jsx","Pages/Contact.jsx","Pages/Portfolio.jsx","Pages/Blog.jsx","components/ResponsiveNavigation.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","Component","Home","Contact","Portfolio","Blog","ResponsiveNavigation","background","hoverBackground","linkColor","navLinks","logo","useState","navOpen","setNavOpen","hoverIndex","setHoverIndex","className","style","onClick","src","height","width","alt","map","link","index","key","onMouseEnter","onMouseLeave","to","path","color","text","icon","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,iPCY5BC,E,uKAPP,OACI,0C,GAJQC,aCSLC,E,uKANP,OACI,yC,GAJOD,aCSJE,E,uKANP,OACI,4C,GAJUF,aCSPG,E,uKANP,OACI,8C,GAJYH,aCSTI,E,uKANP,OACI,yC,GAJOJ,a,OC8CJK,MA7Cf,YAAyF,IAAzDC,EAAwD,EAAxDA,WAAYC,EAA4C,EAA5CA,gBAAiBC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,SAAUC,EAAM,EAANA,KAAM,EAErDC,mBAAS,GAF4C,mBAE5EC,EAF4E,KAEnEC,EAFmE,OAG9CF,oBAAU,GAHoC,mBAG5EG,EAH4E,KAGhEC,EAHgE,KAMpF,OAEI,yBACIC,UAAU,qBACVC,MAAS,CAAEX,WAAYA,IAEnB,wBACAW,MAAS,CAACX,WAAYA,GACtBU,UAAaJ,EAAU,SAAW,IAGlC,4BAAQI,UAAU,aAAaE,QAAU,WAAQL,GAAYD,KACzD,yBAAKO,IAAMT,EAAOU,OAAO,OAAOC,MAAM,OAAOC,IAAI,kBAIvDb,EAASc,KAAI,SAACC,EAAMC,GAAP,OACX,wBACIC,IAAQD,EACRE,aAAiB,WAAQZ,EAAcU,IACvCG,aAAiB,WAAQb,GAAe,IACxCE,MAAU,CAAEX,WAAYQ,IAAeW,EAASlB,GAAmB,OAAU,KAEzE,kBAAC,IAAD,CACIsB,GAAOL,EAAKM,KACZb,MAAS,CAAEc,MAAOvB,IAEZgB,EAAKQ,KACP,uBAAGhB,UAAaQ,EAAKS,e,MC8BtCC,MAvDf,WA8BE,OACE,yBAAKlB,UAAU,OAEX,kBAAC,EAAD,CACEP,SAjCW,CACf,CACEuB,KAAM,OACNF,KAAM,IACNG,KAAM,gBAER,CACED,KAAM,UACNF,KAAM,WACNG,KAAM,qBAER,CACED,KAAM,QACNF,KAAM,SACNG,KAAM,oBAER,CACED,KAAM,QACNF,KAAM,QACNG,KAAM,mBAER,CACED,KAAM,YACNF,KAAM,aACNG,KAAM,sBAUJvB,KAASA,IACTJ,WAAa,OACbC,gBAAkB,OAClBC,UAAY,SAGd,kBAAC,IAAD,KAEE,kBAAC,EAAD,CAASsB,KAAK,aACd,kBAAC,EAAD,CAAMA,KAAK,UACX,kBAAC,EAAD,CAAWA,KAAK,eAChB,kBAAC,EAAD,CAAMA,KAAK,UACX,kBAAC,EAAD,CAAOA,KAAK,cC/CFK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCQNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuG3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c3791596.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\n\nclass About extends Component {\n    \n    render(){\n        return(\n            <div>About</div>\n        )\n    };\n};\n\n\nexport default About;","import React, { Component } from 'react';\n\nclass Home extends Component {\n\n    render(){\n        return(\n            <div>Home</div>\n        )\n    };\n};\n\nexport default Home;\n","import React, { Component } from 'react';\n\nclass Contact extends Component {\n    \n    render() {\n        return (\n            <div>Contact</div>\n        )\n    }\n}\n\nexport default Contact","import React, { Component } from 'react';\n\nclass Portfolio extends Component {\n\n    render(){\n        return(\n            <div>Portfolio</div>\n        )\n    };\n};\n\nexport default Portfolio;","import React, { Component } from 'react';\n\nclass Blog extends Component {\n    \n    render(){\n        return(\n            <div>Blog</div>\n        )\n    };\n};\n\nexport default Blog;","import React, { useState } from 'react';\nimport { Link } from \"@reach/router\";\n\nfunction ResponsiveNavigation({ background, hoverBackground, linkColor, navLinks, logo}){\n\n    const [ navOpen, setNavOpen] = useState(0);\n    const [ hoverIndex, setHoverIndex ] = useState(-1);\n\n\n    return (\n\n        <nav \n            className='responsive-toolbar'\n            style = {{ background: background}}>\n\n                <ul \n                style = {{background: background}}\n                className = {navOpen ? 'active' : ''}\n                >\n\n                <figure className=\"image-logo\" onClick={ () => { setNavOpen(!navOpen) } }>\n                    <img src={ logo } height=\"40px\" width=\"40px\" alt=\"toolbar-logo\" />\n                </figure>\n            \n\n            { navLinks.map((link, index) =>\n                <li \n                    key = { index }\n                    onMouseEnter = { () => { setHoverIndex(index) } }\n                    onMouseLeave = { () => { setHoverIndex(-1) } }\n                    style = { { background: hoverIndex === index ? (hoverBackground || '#999') : '' }}\n                    >\n                        <Link \n                            to = { link.path }\n                            style = {{ color: linkColor}}\n                            >\n                                { link.text }\n                                <i className= { link.icon } />\n\n                            </Link>\n\n                    </li>\n            )}\n            </ul>\n        </nav>\n    )\n}\n\nexport default ResponsiveNavigation","import React from 'react';\nimport logo from './logo.svg';\nimport { Router } from '@reach/router'\n\nimport About from './Pages/About.jsx';\nimport Home from './Pages/Home.jsx';\nimport Contact from './Pages/Contact.jsx';\nimport Portfolio from './Pages/Portfolio.jsx';\nimport Blog from './Pages/Blog.jsx';\nimport ResponsiveNavigation from './components/ResponsiveNavigation.jsx';\nimport './App.css';\n\nfunction App() {\n    const navlinks = [\n      {\n        text: 'Home',\n        path: '/',\n        icon: 'ion-ios-home'\n      },\n      {\n        text: 'Contact',\n        path: '/contact',\n        icon: 'ion-ios-megaphone'\n      },\n      {\n        text: 'About',\n        path: '/about',\n        icon: 'ion-ios-business'\n      },\n      {\n        text: 'Blog ',\n        path: '/blog',\n        icon: 'ion-ios-bonfire'\n      },\n      {\n        text: 'Portfolio',\n        path: '/portfolio',\n        icon: 'ion-ios-briefcase'\n      }\n  ]\n\n\n  return (\n    <div className=\"App\">\n        \n        <ResponsiveNavigation \n          navLinks={ navlinks }\n          logo = { logo }\n          background = \"#fff\"\n          hoverBackground = \"#ddd\"\n          linkColor = \"#777\" />\n\n        \n        <Router>\n\n          <Contact path=\"/contact\" />\n          <Home path=\"/home\" />\n          <Portfolio path=\"/portfolio\" />\n          <Blog path=\"/blog\" />\n          <About path=\"/about\" />\n\n        </Router>\n        \n    </div>\n  );\n}\n\nexport default App;\n\n\n{/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/scss/base.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import MultiCount from './components/multiCount';\n// import NavBar from './components/NavBar';\n\n// import './NavBar.css';\n\n// import 'bootstrap/dist/css/bootstrap.css';\n\n// const ChangeBackground = () =>{\n//     const stylesObj = {background: \"black\"};\n//     return(\n//             <div style={stylesObj} className=\"container\">\n//                 <div>\n//                     <MultiCount />\n//                     <br />\n//                     <MultiCount />\n//                 </div>\n//             </div>)\n// };\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// <React.Fragment>\n//     <NavBar />\n//     <MultiCount />\n//     <br />\n//     <MultiCount />\n// </React.Fragment>\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}